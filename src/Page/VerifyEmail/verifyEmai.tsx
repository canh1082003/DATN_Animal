import React, { useState } from 'react';
import '../VerifyEmail/verifyEmai.css';
import { useParams } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useVerifyEmail } from '../../hooks/auth/useVerifyEmail';
import { useResendVerifyCode } from '../../hooks/auth/useResendVerifyCode';
import LoadingSpinner from '../../Components/Loading/loading';

export default function VerifyEmail() {
  const { email } = useParams<{ email: string }>();
  const [verifyCode, setVerifyCode] = useState('');

  const {
    handleVerify,
    loading: isVerifying,
    error: verifyError,
    success: verifySuccess,
  } = useVerifyEmail();

  const {
    handleResendCode,
    loading: isResending,
    error: resendError,
    success: resendSuccess,
  } = useResendVerifyCode();

  const onVerifyClick = async () => {
    if (!email) return toast.error('Kh√¥ng t√¨m th·∫•y email');

    await handleVerify(email, verifyCode);
    if (verifySuccess) {
      toast.success('X√°c minh th√†nh c√¥ng!');
    } else if (verifyError) {
      toast.error(verifyError);
    }
  };

  const onResendClick = async () => {
    if (!email) return toast.error('Kh√¥ng t√¨m th·∫•y email');

    await handleResendCode(email);
    if (resendSuccess) {
      toast.info('ƒê√£ g·ª≠i l·∫°i m√£ x√°c nh·∫≠n. Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n.');
    } else if (resendError) {
      toast.error(resendError);
    }
  };

  return (
    <div className="verify-email-container">
      <div className="verify-email-card">
        <div className="verify-logo">
          <span className="dog-icon">üêï</span>
          <h1><span>Dog</span>Behavior</h1>
        </div>

        <div className="verify-header">
          <div className="verify-icon">
            <span role="img" aria-label="smile">üòä</span>
          </div>
          <h2>X√°c Minh T√†i Kho·∫£n</h2>
          <p className="verify-subtitle">Ki·ªÉm tra h·ªôp th∆∞ ƒë·∫øn c·ªßa b·∫°n</p>
        </div>

        <div className="verify-content">
          <p className="verify-description">
            M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn
            <span className="verify-email"> {email} </span>
          </p>

          <div className="verify-form">
            <div className="input-wrapper">
              <input
                type="text"
                placeholder="Nh·∫≠p m√£ x√°c nh·∫≠n"
                value={verifyCode}
                onChange={(e) => setVerifyCode(e.target.value)}
                autoFocus
              />
            </div>

            <button
              className="verify-button"
              onClick={onVerifyClick}
              disabled={isVerifying}
            >
              {isVerifying ? <LoadingSpinner size={20} /> : 'X√°c Nh·∫≠n'}
            </button>
          </div>

          <div className="verify-help">
            <p>Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?</p>
            <button
              className="resend-button"
              onClick={onResendClick}
              disabled={isResending}
            >
              {isResending ? <LoadingSpinner size={18} /> : 'G·ª≠i l·∫°i m√£'}
            </button>
          </div>
        </div>

        <div className="verify-footer">
          <div className="verify-note">
            <span className="info-icon">‚ÑπÔ∏è</span>
            <p>
              ƒê·ªÉ s·ª≠ d·ª•ng trang web DogBehavior, b·∫°n c·∫ßn x√°c minh t√†i kho·∫£n. ƒêi·ªÅu n√†y gi√∫p b·∫£o v·ªá th√¥ng tin v√† tƒÉng c∆∞·ªùng b·∫£o m·∫≠t cho t√†i kho·∫£n c·ªßa b·∫°n.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
